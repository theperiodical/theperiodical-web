// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  super_admin
  org_admin
  manager
  content_writer
}

enum Status {
  active
  inactive
}

enum GistStatus {
  draft
  submitted
  approved
  rejected
  published
  archived
}

enum InvitationStatus {
  pending
  accepted
  expired
  revoked
}

enum PlanType {
  free
  premium
  enterprise
}

model Organization {
  id          String  @id @default(uuid())
  name        String  @unique
  slug        String  @unique
  description String?
  logo        String?
  status      Status  @default(active)

  plan_type   PlanType  @default(free)
  plan_expiry DateTime?
  max_members Int?      @default(5)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  users       User[]
  gists       Gist[]
  invitations Invitation[]

  @@map("organizations")
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  name           String?
  phone          String?
  password       String?
  email_verified DateTime?
  image          String?

  role            Role          @default(content_writer)
  status          Status        @default(active)
  organization_id String?
  organization    Organization? @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  authored_gists       Gist[]       @relation("GistAuthor")
  accounts             Account[]
  sessions             Session[]
  sent_invitations     Invitation[] @relation("InviterUser")
  accepted_invitations Invitation[] @relation("AcceptedInvitation")
  assigned_gists       Gist[]       @relation("GistAssigner")
  reviewed_gists       Gist[]       @relation("GistReviewer")

  @@index([organization_id])
  @@index([email])
  @@index([status])
  @@map("users")
}

model Account {
  id                  String  @id @default(uuid())
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String? @db.Text
  access_token        String? @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String? @db.Text
  session_state       String?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@index([user_id])
  @@map("accounts")
}

model Session {
  id            String   @id @default(uuid())
  session_token String   @unique
  user_id       String
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([expires])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires])
  @@map("verificationtokens")
}

model Gist {
  id          String   @id @default(uuid())
  slug        String   @unique
  title       String
  description String?
  from        DateTime
  to          DateTime

  organization_id String
  organization    Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  author_id       String
  author          User         @relation("GistAuthor", fields: [author_id], references: [id])

  status       GistStatus @default(draft)
  published_at DateTime?

  assigned_by String?
  assigner    User?   @relation("GistAssigner", fields: [assigned_by], references: [id])
  reviewed_by String?
  reviewer    User?   @relation("GistReviewer", fields: [reviewed_by], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  topics Topic[]

  @@index([organization_id])
  @@index([author_id])
  @@index([status])
  @@index([slug])
  @@index([from, to])
  @@map("gists")
}

model Topic {
  id         String   @id @default(uuid())
  title      String
  content    String   @db.Text
  order      Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  gist_id String
  gist    Gist   @relation(fields: [gist_id], references: [id], onDelete: Cascade)

  @@index([gist_id])
  @@index([gist_id, order])
  @@map("topics")
}

model Invitation {
  id     String           @id @default(uuid())
  email  String
  role   Role
  status InvitationStatus @default(pending)

  organization_id String
  organization    Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  invited_by   String
  inviter      User   @relation("InviterUser", fields: [invited_by], references: [id])
  invited_to   String?
  invited_user User?  @relation("AcceptedInvitation", fields: [invited_to], references: [id])

  token       String    @unique
  expires_at  DateTime
  sent_at     DateTime  @default(now())
  accepted_at DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([email, organization_id])
  @@index([token])
  @@index([expires_at])
  @@index([organization_id])
  @@index([status])
  @@index([invited_to])
  @@map("invitations")
}
